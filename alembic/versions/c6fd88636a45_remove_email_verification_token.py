"""remove email_verification_token

Revision ID: c6fd88636a45
Revises: add_email_verification_code
Create Date: 2025-07-01 21:10:32.725064

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c6fd88636a45'
down_revision: Union[str, Sequence[str], None] = 'add_email_verification_code'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('aimessage')
    op.drop_table('notificationsettings')
    op.drop_table('goal')
    op.drop_table('backup')
    op.drop_table('vaulttransaction')
    op.drop_table('vault')
    op.drop_index('ix_user_email_verification_token', table_name='user')
    op.create_index(op.f('ix_user_email_verification_code'), 'user', ['email_verification_code'], unique=False)
    op.drop_column('user', 'email_verification_token')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('email_verification_token', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_user_email_verification_code'), table_name='user')
    op.create_index('ix_user_email_verification_token', 'user', ['email_verification_token'], unique=False)
    op.create_table('vault',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('vault_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('total_saved', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('target_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('growth_stage', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_deposit_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_reminder_sent', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='vault_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='vault_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('vaulttransaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('deposit', 'withdrawal', name='vaulttransactiontype'), autoincrement=False, nullable=False),
    sa.Column('note', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ai_confirmation', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('vault_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='vaulttransaction_user_id_fkey'),
    sa.ForeignKeyConstraint(['vault_id'], ['vault.id'], name='vaulttransaction_vault_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='vaulttransaction_pkey')
    )
    op.create_table('backup',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('size_bytes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='backup_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='backup_pkey')
    )
    op.create_table('goal',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('target_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('current_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('deadline', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('in_progress', 'completed', 'deleted', name='goalstatus'), autoincrement=False, nullable=False),
    sa.Column('last_reminder_sent', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='goal_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='goal_pkey')
    )
    op.create_table('notificationsettings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('daily_reminder', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('daily_reminder_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('goal_updates', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('vault_updates', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('ai_insights', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='notificationsettings_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='notificationsettings_pkey'),
    sa.UniqueConstraint('user_id', name='notificationsettings_user_id_key')
    )
    op.create_table('aimessage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('user', 'assistant', name='airole'), autoincrement=False, nullable=False),
    sa.Column('context_type', postgresql.ENUM('general', 'expense', 'income', 'goal', 'vault', name='aicontexttype'), autoincrement=False, nullable=False),
    sa.Column('context_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='aimessage_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='aimessage_pkey')
    )
    # ### end Alembic commands ###
